ADO.NET представляет ограниченный круг объектов: Connection, Command, DataReader, DataSet, DataTable и DataAdapter.

С их помощью производится любая работа с базой данных, независимо от конкретного провайдера.
При этом объекты Connection, Command, DataReader и DataAdapter у каждого провайдера свои, но отвечают они за одно и то же.
При этом объекты DataSet и DataTable одинаковы для всех провайдеров.

ADO.NET реализует две принципиально разные модели работы: присоединенные объекты и отсоединенные объекты.
Также их иногда называют «присоединенная модель» и «отсоединенная модель», «подключенный уровень» и «отключенный уровень».

1 В случае работы с присоединенной моделью мы работаем с базой данных напрямую. 
Мы управляем открытием и закрытием подключения, а чтение происходит построчно.

2 В случае работы с отсоединенной моделью мы работаем с такими же объектами базы данных, 
но они на самом деле находятся в памяти нашего приложения.

То есть, в присоединенной модели приложение всегда подключено к источнику данных, 
а в отсоединенной оно получает данные и отключается до тех пор, пока данные не понадобятся снова.

__________
Что нам потребуется для работы с MSSQL сервером (или любой другой БД)?
1 определить такую вещь, как строка подключения - значение, которое обозначает какой именно сервер мы используем, 
какую БД и как именно подключаемся.
Строка подключения представляет набор параметров в виде пар ключ=значение, которые отделяются друг от друга точкой с запятой.
Пример: "Data Source = DAL/DB/social_network.db; Version = 3"

Определение строки подключения зависит от типа подключения для MSSQL Server: 
- либо мы подключаемся по логину и паролю
Server=адрес_сервера;Database=имя_базы_данных;User Id=логин;Password=пароль;

- либо мы используем доверенное подключение (trusted connection), 
где не требуются логин и пароль (например, при подключении к локальному серверу SQL Server)
Server=адрес_сервера;Database=имя_базы_данных;Trusted_Connection=True;




Первичный ключ генерировался автоматически:
CREATE TABLE NetworkUser
(
	Id int PRIMARY KEY identity(1,1),
	Name varchar(max) not null,
	Login  varchar(20) not null,
)

обозначаем этот столбец как столбец идентификаторов с помощью команды identity. (аналогичен полю serial)
В скобках мы указываем начальное значение и приращение этого значения. 
То есть наши Id в таблице будут начинаться с 1 и далее увеличиваться на 1 для каждой новой строки. 



Отсоединенная модель
_______________________________
DataAdapter для подключения к базе данных, 
DataSet для работы с данными,
DataTable внутри него
Основной особенностью данных объектов является то, что происходит подключение к базе данных, 
забираются сразу же все данные из неё, а после данные существуют в приложении локально — связи с базой больше не существует 
и мы работаем при этом так, будто эта связь есть.

DataAdapter — объект для заполнения DataSet данными. 
Он является тем, что взаимодействует с базой данных, именно через него выполняется подключение к базе данных и выполнение запроса в ней.


Этот объект DataSet из пространства имен System.Data представляет хранилище или кэш данных в памяти, 
извлеченных из источника данных. Объект DataSet содержит таблицы, которые представлены типом DataTable. 
Таблица DataTable, в свою очередь, состоит из столбцов и строк. 
Каждый столбец представляет объект DataColumn, а строка — объект DataRow.


Присоединенная модель
_______________________________

Если вы будете работать на уровне DataTable, вы измените значение, но оно не изменится в базе

Принцип следующий: мы обращаемся к данным, когда они нам нужны, каждый раз. 
Подключение к базе при этом нужно каждый раз открывать заново для того, чтобы как-либо манипулировать данными и изменять их в самой базе данных.

В ADO.NET за реализацию работы с подключением к БД отвечает большое количество классов

Команды в ADO.NET представлены объектом интерфейса System.Data.IDbCommand.
Пакет Microsoft.Data.SqlClient предоставляет его реализацию в виде класса SqlCommand. 




Передача параметров (в харнимые процедуры или ещу куда-либо)
_______________________________________________________________
Для определения параметров используется объект SqlParameter. Этот объект, в первую очередь, используется как способ передать параметры в процедуру, но не только. Мы также можем передавать в качестве параметров данные в любой запрос, то есть параметризировать его. 

Зачем это требуется? 

Дело в том, что кроме передачи безобидных данных вроде имени и логина на данном этапе возможно передать что угодно, 
в том числе и ошибочные данные с символами, которые будут разделять строку, что вызовет в БД ошибки в данных. 

Но гораздо опаснее то, что злоумышленник может передать команду, которая уничтожит нашу базу данных или таблицу. 

Потому для работы с прямыми запросами SQL желательно использовать либо процедуры с параметрами, либо параметризованные запросы. 
Также применяется экранирование данных (в нашем примере с командой DELETE мы экранировали входные данные вручную), то есть, 
что бы ни было введено, оно воспринимается как строка. 

Объект SqlParameter экранирует данные автоматически. 

Для конфигурации параметров можно использовать их свойства, среди которых следует выделить следующие:

- Direction: хранит направление параметра, которое указывает, будет ли параметр входным или выходным, 
или он будет сочетать оба варианта, либо он будет возвращать данные из хранимой процедуры.
- ParameterName: представляет имя параметра.
- Value: хранит значение параметра.